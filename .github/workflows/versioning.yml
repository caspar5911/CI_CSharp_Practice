name: Bump and Tag Assembly Versions

on:
  push:
    branches: [main]  # Only run on pushes to main branch

jobs:
  version-bump:
    runs-on: ubuntu-latest

    steps:
      # Step 1: Checkout the repo
      - name: Checkout
        uses: actions/checkout@v4

      # Step 2: Detect changed files and collect paths to modules with AssemblyInfo.cs
      - name: Detect Changed Files
        run: |
          # Get list of changed files in the last commit
          git diff --name-only HEAD~1 HEAD > changed_modules.txt || true

          # Clear the intermediate output file
          > modules_with_assemblyinfo.txt

          # For each changed file, walk up directories to find Properties/AssemblyInfo.cs
          while read -r filepath; do
            dir=$(dirname "$filepath")

            # Go up until we find AssemblyInfo.cs or hit root
            while [ "$dir" != "." ] && [ "$dir" != "/" ]; do
              if [ -f "$dir/Properties/AssemblyInfo.cs" ]; then
                echo "$dir" >> modules_with_assemblyinfo.txt
                break
              fi
              dir=$(dirname "$dir")
            done
          done < changed_modules.txt

          # Remove duplicates and save to a clean list of valid modules
          sort modules_with_assemblyinfo.txt | uniq > valid_modules.txt
          
          # Output the valid modules list
          cat valid_modules.txt

      # Step 3: Bump full 4-part version in AssemblyInfo.cs (only revision part is increased)
      - name: Bump Full Version in AssemblyInfo.cs
        run: |
          # Clear previous version info
          > module_versions.txt

          # Only proceed if valid modules were found
          if [ -s valid_modules.txt ]; then
            while IFS= read -r module_path; do
              file="$module_path/Properties/AssemblyInfo.cs"
              echo "Checking $file"

              if [ -f "$file" ]; then
                # Extract current version in format x.y.z.r (e.g., 1.2.3.4)
                current_version=$(grep -oP 'AssemblyFileVersion\("\K[0-9]+\.[0-9]+\.[0-9]+\.[0-9]+' "$file")
                echo "Current version: $current_version"

                # Split version into components
                IFS='.' read -r major minor build revision <<< "$current_version"

                # Bump revision number
                new_version="$major.$minor.$build.$((revision + 1))"

                # Replace the version in file using sed
                sed -i "s/AssemblyFileVersion(\"$current_version/AssemblyFileVersion(\"$new_version/" "$file"

                # Log the updated module and version
                echo "$module_path|$new_version" >> module_versions.txt
                echo "Updated to version: $new_version"
              fi
            done < valid_modules.txt
          else
            echo "No valid modules found."
          fi

      # Step 4: Commit the updated version files
      - name: Commit version bumps
        run: |
          if [ -f module_versions.txt ]; then
            git config user.name "github-actions"
            git config user.email "github-actions@github.com"
            git add .
            git commit -m "Bump AssemblyFileVersion for updated modules"
            git push
          else
            echo "No modules updated."
          fi

      # Step 5: Tag the updated modules using the bumped version
      - name: Tag updated modules
        run: |
          if [ -f module_versions.txt ]; then
            while IFS='|' read -r module version; do
              # Format tag as: path/to/module/v1.2.3.4
              tag="${module}/v${version}"
              echo "Creating tag: $tag"
              git tag -a "$tag" -m "Bump ${module} to ${version}"
              git push origin "$tag"
            done < module_versions.txt
          else
            echo "No versioned modules to tag."
          fi

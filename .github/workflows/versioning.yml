name: Auto Version Bump and Tag

on:
  push:
    branches:
      - main

jobs:
  versioning:
    runs-on: ubuntu-latest
    steps:
      # Step 1: Checkout the repository
      - name: Checkout Code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0  # Full history needed for git diff and git log

      # Step 2: Detect Changed Files
      - name: Detect Changed Files
        id: detect_changes
        run: |
          echo "Detecting changed files between commits..."
          git diff --name-only ${{ github.event.before }} ${{ github.sha }} > changed_modules.txt || true

          echo "Finding valid modules with AssemblyInfo.cs or .csproj files..."
          > modules_with_assemblyinfo.txt

          while read -r filepath; do
            dir=$(dirname "$filepath")
            while [ "$dir" != "." ] && [ "$dir" != "/" ]; do
              if [ -f "$dir/Properties/AssemblyInfo.cs" ] || [ -n "$(find "$dir" -maxdepth 1 -name '*.csproj')" ]; then
                echo "$dir" >> modules_with_assemblyinfo.txt
                break
              fi
              dir=$(dirname "$dir")
            done
          done < changed_modules.txt

          echo "Deduplicating valid modules..."
          sort modules_with_assemblyinfo.txt | uniq > valid_modules.txt

          echo "Changed files:"
          cat changed_modules.txt
          echo "Detected modules:"
          cat valid_modules.txt

      # Step 3: Detect Version Type based on commit messages
      - name: Detect Version Type (major/minor/build/revision)
        id: detect_version
        run: |
          echo "Detecting version bump type based on commit messages..."
          commits=$(git log --pretty=format:"%s" ${{ github.event.before }}..${{ github.sha }})

          echo "Commit messages detected:"
          echo "$commits"

          version_bump="revision"  # Default bump type

          while read -r commit; do
            echo "Analyzing commit: $commit"
            if [[ "$commit" == *"BREAKING CHANGE:"* ]]; then
              version_bump="major"
              break
            elif [[ "$commit" == *"feat:"* && "$version_bump" != "major" ]]; then
              version_bump="minor"
            elif [[ "$commit" == *"fix:"* && "$version_bump" == "revision" ]]; then
              version_bump="build"
            fi
          done <<< "$commits"

          echo "Determined version bump: $version_bump"
          echo "version_bump=$version_bump" >> $GITHUB_OUTPUT

      # Step 4: Bump FileVersion inside AssemblyInfo.cs
      - name: Bump AssemblyInfo.cs Versions
        id: bumpAssemblyInfo
        run: |
          echo "Bumping AssemblyInfo.cs versions..."
          version_bump="${{ steps.detect_version.outputs.version_bump }}"

          if [ -s valid_modules.txt ]; then
            while IFS= read -r module_path; do
              file="$module_path/Properties/AssemblyInfo.cs"
              if [ -f "$file" ]; then
                echo "Processing: $file"

                current_version=$(grep -oP 'AssemblyFileVersion\("\K[0-9]+\.[0-9]+\.[0-9]+\.[0-9]+' "$file")
                echo "Current version: $current_version"

                IFS='.' read -r major minor build revision <<< "$current_version"

                if [ "$version_bump" == "major" ]; then
                  new_version="$((major + 1)).0.0.0"
                elif [ "$version_bump" == "minor" ]; then
                  new_version="$major.$((minor + 1)).0.0"
                elif [ "$version_bump" == "build" ]; then
                  new_version="$major.$minor.$((build + 1)).0"
                else
                  new_version="$major.$minor.$build.$((revision + 1))"
                fi

                echo "Updating to new version: $new_version"
                sed -i "s/AssemblyFileVersion(\"$current_version\"/AssemblyFileVersion(\"$new_version\"/" "$file"

                echo "$module_path|$new_version" >> module_versions.txt
              else
                echo "Warning: AssemblyInfo.cs not found in $module_path"
              fi
            done < valid_modules.txt
          else
            echo "No valid modules found to bump AssemblyInfo."
          fi

      # Step 5: Bump Version inside .csproj file
      - name: Bump .csproj Versions
        id: bumpCsproj
        run: |
          echo "Bumping .csproj versions..."
          version_bump="${{ steps.detect_version.outputs.version_bump }}"

          if [ -s valid_modules.txt ]; then
            while IFS= read -r module_path; do
              echo "Checking module: $module_path"

              csproj_file=$(find "$module_path" -maxdepth 1 -name "*.csproj")

              if [ -n "$csproj_file" ]; then
                echo "Found .csproj: $csproj_file"

                current_version=$(grep -oP '<FileVersion>\K[0-9]+\.[0-9]+\.[0-9]+\.[0-9]+' "$csproj_file" || true)

                if [ -n "$current_version" ]; then
                  echo "Current .csproj version: $current_version"
                  IFS='.' read -r major minor build revision <<< "$current_version"

                  if [ "$version_bump" == "major" ]; then
                    new_version="$((major + 1)).0.0.0"
                  elif [ "$version_bump" == "minor" ]; then
                    new_version="$major.$((minor + 1)).0.0"
                  elif [ "$version_bump" == "build" ]; then
                    new_version="$major.$minor.$((build + 1)).0"
                  else
                    new_version="$major.$minor.$build.$((revision + 1))"
                  fi

                  echo "Updating .csproj to new version: $new_version"
                  sed -i "s|<FileVersion>$current_version</FileVersion>|<FileVersion>$new_version</FileVersion>|g" "$csproj_file"

                  echo "$module_path|$new_version" >> module_versions.txt
                else
                  echo "Warning: <FileVersion> not found in $csproj_file"
                fi
              else
                echo "Warning: No .csproj found in $module_path"
              fi
            done < valid_modules.txt
          else
            echo "No valid modules found to bump .csproj."
          fi


      # Step 6: Commit updated files
      - name: Commit Updated Versions
        run: |
          echo "Committing updated files if any changes detected..."
          if [ -f module_versions.txt ]; then
            if git diff --quiet; then
              echo "No changes to commit."
            else
              echo "Changes detected, committing..."
              git config user.name "github-actions"
              git config user.email "github-actions@github.com"
              git add .
              git commit -m "Bump version numbers for updated modules"
              git push
            fi
          else
            echo "No modules were updated, skipping commit."
          fi

      # Step 7: Tag Updated Modules
      - name: Tag Updated Modules
        run: |
          echo "Tagging updated modules..."
          if [ -f module_versions.txt ]; then
            while IFS='|' read -r module version; do
              tag="${module}/v${version}"

              echo "Checking if tag $tag already exists..."
              if git rev-parse "$tag" >/dev/null 2>&1; then
                echo "Tag $tag already exists. Skipping."
              else
                echo "Creating new tag: $tag"
                git tag -a "$tag" -m "Bump ${module} to ${version}"
                git push "https://x-access-token:${{ secrets.GITHUB_TOKEN }}@github.com/${{ github.repository }}" "$tag"
              fi
            done < module_versions.txt
          else
            echo "No modules to tag."
          fi
